# # Maven
# # Build your Java project and run tests with Apache Maven.
# # Add steps that analyze code, save build artifacts, deploy, and more:
# # https://docs.microsoft.com/azure/devops/pipelines/languages/java
# # This is an example of using VeraDemo Java test application with the Veracode Static Pipeline scanner.  A Veracode subscription is required.
# trigger:
# - master
# pool:
#   vmImage: 'ubuntu-latest'
# steps:
# - task: Maven@3
#   displayName: Build with Maven
#   inputs:
#     mavenPomFile: 'app/pom.xml'
#     mavenOptions: '-Xmx3072m'
#     javaHomeOption: 'JDKVersion'
#     jdkVersionOption: '1.8'
#     jdkArchitectureOption: 'x64'
#     publishJUnitResults: true
#     testResultsFiles: '**/surefire-reports/TEST-*.xml'
#     goals: 'package'
# - task: Bash@3
#   displayName: Veracode Pipeline
#   inputs:
#     targetType: 'inline'
#     script: |
#       curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
#       unzip -o pipeline-scan-LATEST.zip
#       chmod 777 './my-app.jar'
#       java -jar pipeline-scan.jar -vid $(VERACODE_API_ID) -vkey $(VERACODE_API_KEY) -f /home/vsts/work/1/s/app/target/my-app.jar || true
# - publish: $(System.DefaultWorkingDirectory)/results.json
#   artifact: VeracodeBaseline




# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- task: Maven@3
  inputs:
    mavenPomFile: 'app/pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'
    
- script: |
    # Find the JAR file generated by Maven
    jar_file=$(find $(System.DefaultWorkingDirectory) -name '*.jar' -print -quit)
    echo "Found JAR file: $jar_file"
    # Continue with Veracode scan only if a JAR file is found
    if [ -n "$jar_file" ]; then
      curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
      unzip -o pipeline-scan-LATEST.zip
      java -jar pipeline-scan.jar -vid $(VERACODE_API_ID) -vkey $(VERACODE_API_KEY) -f "$jar_file" || true
    else
      echo "No JAR file found. Skipping Veracode scan."
    fi
  displayName: 'Find JAR file and perform Veracode scan (if applicable)'
  continueOnError: true
  
- publish: $(System.DefaultWorkingDirectory)/results.json
  artifact: VeracodeBaseline
